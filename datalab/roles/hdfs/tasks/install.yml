---

- set_fact:
    hdfs_env="export HADOOP_HOME=\"{{hdfs.home_dir}}\" && export HADOOP_COMMON_HOME=\"$HADOOP_HOME\" && export HADOOP_HDFS_HOME=\"$HADOOP_HOME\" && export HADOOP_CONF_DIR=\"$HADOOP_HOME/etc/hadoop\" && export JAVA_HOME=\"{{java_home | default('/usr/lib/jvm/default')}}\" && export PATH=\"$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin\""

# Install Debian dependencies
- name: Install Debian dependencies
  apt: pkg={{item}} state=present update_cache=yes cache_valid_time=3600
  with_items:
    - tar
    - wget
  sudo: yes
  when: ansible_os_family == 'Debian'

# Install Redhat dependencies
- name: Install Redhat dependencies
  yum: name={{item}} state=present update_cache=yes
  with_items:
    - tar
    - wget
  sudo: yes
  when: ansible_os_family == 'RedHat'

- name: stop journal node
  shell: "{{hdfs_env}} && {{hdfs.home_dir}}/sbin/hadoop-daemon.sh stop journalnode"
  become: yes
  become_user: "{{hdfs.user}}"
  #when: hdfs.journal_node|bool


- name: stop name nodes
  shell: "{{hdfs_env}} && {{hdfs.home_dir}}/sbin/hadoop-daemon.sh stop namenode"
  become: yes
  become_user: "{{hdfs.user}}"
  ignore_errors: yes

- name: stop zkfcs
  shell: "{{hdfs_env}} && {{hdfs.home_dir}}/sbin/hadoop-daemon.sh stop zkfc"
  become: yes
  become_user: "{{hdfs.user}}"
  ignore_errors: yes

- name: stop datanodes
  shell: "{{hdfs_env}} && {{hdfs.home_dir}}/sbin/hadoop-daemon.sh stop datanode"
  become: yes
  become_user: "{{hdfs.user}}"
  ignore_errors: yes

#suppression repertoires HDFS
- file: path={{hdfs.name_dir}} state=absent
  sudo: yes
  when: hdfs.delete_existing_hdfs_files|bool

- file: path={{hdfs.data_dir}} state=absent
  sudo: yes
  when: hdfs.delete_existing_hdfs_files|bool

- file: path={{hdfs.jn_dir}} state=absent
  sudo: yes  
  when: hdfs.delete_existing_hdfs_files|bool


- file: path="{{hdfs.data_dir}}" mode=0755 state=directory owner={{hdfs.user}} group={{hdfs.group}}
  sudo: yes
  when: hdfs.data_node|bool

- file: path="{{hdfs.name_dir}}" mode=0755 state=directory owner={{hdfs.user}} group={{hdfs.group}}
  sudo: yes
  when: hdfs.name_node|bool

- file: path="{{hdfs.jn_dir}}" mode=0755 state=directory owner={{hdfs.user}} group={{hdfs.group}}
  sudo: yes
  when: hdfs.journal_node|bool

# Update local ansible facts
- file: path=/etc/ansible/facts.d state=directory
  sudo: yes
  when: hdfs.name_node|bool or hdfs.journal_node|bool or hdfs.data_node|bool

- template: src=hdfs.fact dest="/etc/ansible/facts.d/hdfs.fact"
  sudo: yes
  when: hdfs.name_node|bool or hdfs.journal_node|bool or hdfs.data_node|bool
